# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_wxctb', [dirname(__file__)])
        except ImportError:
            import _wxctb
            return _wxctb
        if fp is not None:
            try:
                _mod = imp.load_module('_wxctb', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _wxctb = swig_import_helper()
    del swig_import_helper
else:
    import _wxctb
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def new_intp():
  return _wxctb.new_intp()
new_intp = _wxctb.new_intp

def copy_intp(*args, **kwargs):
  return _wxctb.copy_intp(*args, **kwargs)
copy_intp = _wxctb.copy_intp

def delete_intp(*args, **kwargs):
  return _wxctb.delete_intp(*args, **kwargs)
delete_intp = _wxctb.delete_intp

def intp_assign(*args, **kwargs):
  return _wxctb.intp_assign(*args, **kwargs)
intp_assign = _wxctb.intp_assign

def intp_value(*args, **kwargs):
  return _wxctb.intp_value(*args, **kwargs)
intp_value = _wxctb.intp_value
class timer_control(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    usecs = _swig_property(_wxctb.timer_control_usecs_get, _wxctb.timer_control_usecs_set)
    exitflag = _swig_property(_wxctb.timer_control_exitflag_get, _wxctb.timer_control_exitflag_set)
    exitfnc = _swig_property(_wxctb.timer_control_exitfnc_get, _wxctb.timer_control_exitfnc_set)
timer_control_swigregister = _wxctb.timer_control_swigregister
timer_control_swigregister(timer_control)

class Timer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = _wxctb.new_Timer(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wxctb.delete_Timer
    __del__ = lambda self : None;
    def start(self): return _wxctb.Timer_start(self)
    def stop(self): return _wxctb.Timer_stop(self)
Timer_swigregister = _wxctb.Timer_swigregister
Timer_swigregister(Timer)


def sleepms(*args, **kwargs):
  return _wxctb.sleepms(*args, **kwargs)
sleepms = _wxctb.sleepms
CTB_RESET = _wxctb.CTB_RESET
class IOBase(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _wxctb.delete_IOBase
    __del__ = lambda self : None;
    def ClassName(self): return _wxctb.IOBase_ClassName(self)
    def Close(self): return _wxctb.IOBase_Close(self)
    def Ioctl(self, *args, **kwargs): return _wxctb.IOBase_Ioctl(self, *args, **kwargs)
    def IsOpen(self): return _wxctb.IOBase_IsOpen(self)
    def Open(self, *args, **kwargs): return _wxctb.IOBase_Open(self, *args, **kwargs)
    def PutBack(self, *args, **kwargs): return _wxctb.IOBase_PutBack(self, *args, **kwargs)
    def Read(self, *args, **kwargs): return _wxctb.IOBase_Read(self, *args, **kwargs)
    def ReadUntilEOS(self, *args, **kwargs): return _wxctb.IOBase_ReadUntilEOS(self, *args, **kwargs)
    def Readv(self, *args, **kwargs): return _wxctb.IOBase_Readv(self, *args, **kwargs)
    def Write(self, *args, **kwargs): return _wxctb.IOBase_Write(self, *args, **kwargs)
    def Writev(self, *args, **kwargs): return _wxctb.IOBase_Writev(self, *args, **kwargs)
IOBase_swigregister = _wxctb.IOBase_swigregister
IOBase_swigregister(IOBase)

ParityNone = _wxctb.ParityNone
ParityOdd = _wxctb.ParityOdd
ParityEven = _wxctb.ParityEven
ParityMark = _wxctb.ParityMark
ParitySpace = _wxctb.ParitySpace
LinestateDcd = _wxctb.LinestateDcd
LinestateCts = _wxctb.LinestateCts
LinestateDsr = _wxctb.LinestateDsr
LinestateDtr = _wxctb.LinestateDtr
LinestateRing = _wxctb.LinestateRing
LinestateRts = _wxctb.LinestateRts
LinestateNull = _wxctb.LinestateNull
class SerialPort_DCS(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    baud = _swig_property(_wxctb.SerialPort_DCS_baud_get, _wxctb.SerialPort_DCS_baud_set)
    parity = _swig_property(_wxctb.SerialPort_DCS_parity_get, _wxctb.SerialPort_DCS_parity_set)
    wordlen = _swig_property(_wxctb.SerialPort_DCS_wordlen_get, _wxctb.SerialPort_DCS_wordlen_set)
    stopbits = _swig_property(_wxctb.SerialPort_DCS_stopbits_get, _wxctb.SerialPort_DCS_stopbits_set)
    rtscts = _swig_property(_wxctb.SerialPort_DCS_rtscts_get, _wxctb.SerialPort_DCS_rtscts_set)
    xonxoff = _swig_property(_wxctb.SerialPort_DCS_xonxoff_get, _wxctb.SerialPort_DCS_xonxoff_set)
    buf = _swig_property(_wxctb.SerialPort_DCS_buf_get, _wxctb.SerialPort_DCS_buf_set)
    def __init__(self): 
        this = _wxctb.new_SerialPort_DCS()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wxctb.delete_SerialPort_DCS
    __del__ = lambda self : None;
    def GetSettings(self): return _wxctb.SerialPort_DCS_GetSettings(self)
SerialPort_DCS_swigregister = _wxctb.SerialPort_DCS_swigregister
SerialPort_DCS_swigregister(SerialPort_DCS)

class SerialPort_EINFO(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    brk = _swig_property(_wxctb.SerialPort_EINFO_brk_get, _wxctb.SerialPort_EINFO_brk_set)
    frame = _swig_property(_wxctb.SerialPort_EINFO_frame_get, _wxctb.SerialPort_EINFO_frame_set)
    overrun = _swig_property(_wxctb.SerialPort_EINFO_overrun_get, _wxctb.SerialPort_EINFO_overrun_set)
    parity = _swig_property(_wxctb.SerialPort_EINFO_parity_get, _wxctb.SerialPort_EINFO_parity_set)
    def __init__(self): 
        this = _wxctb.new_SerialPort_EINFO()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wxctb.delete_SerialPort_EINFO
    __del__ = lambda self : None;
SerialPort_EINFO_swigregister = _wxctb.SerialPort_EINFO_swigregister
SerialPort_EINFO_swigregister(SerialPort_EINFO)

CTB_SER_GETEINFO = _wxctb.CTB_SER_GETEINFO
CTB_SER_GETBRK = _wxctb.CTB_SER_GETBRK
CTB_SER_GETFRM = _wxctb.CTB_SER_GETFRM
CTB_SER_GETOVR = _wxctb.CTB_SER_GETOVR
CTB_SER_GETPAR = _wxctb.CTB_SER_GETPAR
CTB_SER_GETINQUE = _wxctb.CTB_SER_GETINQUE
CTB_SER_SETPAR = _wxctb.CTB_SER_SETPAR
class SerialPort_x(IOBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _wxctb.delete_SerialPort_x
    __del__ = lambda self : None;
    def ClassName(self): return _wxctb.SerialPort_x_ClassName(self)
    def ChangeLineState(self, *args, **kwargs): return _wxctb.SerialPort_x_ChangeLineState(self, *args, **kwargs)
    def ClrLineState(self, *args, **kwargs): return _wxctb.SerialPort_x_ClrLineState(self, *args, **kwargs)
    def GetLineState(self): return _wxctb.SerialPort_x_GetLineState(self)
    def GetSettingsAsString(self): return _wxctb.SerialPort_x_GetSettingsAsString(self)
    def Ioctl(self, *args, **kwargs): return _wxctb.SerialPort_x_Ioctl(self, *args, **kwargs)
    def SendBreak(self, *args, **kwargs): return _wxctb.SerialPort_x_SendBreak(self, *args, **kwargs)
    def SetBaudrate(self, *args, **kwargs): return _wxctb.SerialPort_x_SetBaudrate(self, *args, **kwargs)
    def SetLineState(self, *args, **kwargs): return _wxctb.SerialPort_x_SetLineState(self, *args, **kwargs)
    def SetParityBit(self, *args, **kwargs): return _wxctb.SerialPort_x_SetParityBit(self, *args, **kwargs)
    IsStandardRate = staticmethod(_wxctb.SerialPort_x_IsStandardRate)
SerialPort_x_swigregister = _wxctb.SerialPort_x_swigregister
SerialPort_x_swigregister(SerialPort_x)

def SerialPort_x_IsStandardRate(*args, **kwargs):
  return _wxctb.SerialPort_x_IsStandardRate(*args, **kwargs)
SerialPort_x_IsStandardRate = _wxctb.SerialPort_x_IsStandardRate

COM1 = "/dev/ttyS0"
COM2 = "/dev/ttyS1"
COM3 = "/dev/ttyS2"
COM4 = "/dev/ttyS3"
COM5 = "/dev/ttyS4"
COM6 = "/dev/ttyS5"
COM7 = "/dev/ttyS6"
COM8 = "/dev/ttyS7"
COM9 = "/dev/ttyS8"

class SerialPort(SerialPort_x):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _wxctb.new_SerialPort()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wxctb.delete_SerialPort
    __del__ = lambda self : None;
    def ChangeLineState(self, *args, **kwargs): return _wxctb.SerialPort_ChangeLineState(self, *args, **kwargs)
    def ClrLineState(self, *args, **kwargs): return _wxctb.SerialPort_ClrLineState(self, *args, **kwargs)
    def GetLineState(self): return _wxctb.SerialPort_GetLineState(self)
    def Ioctl(self, *args, **kwargs): return _wxctb.SerialPort_Ioctl(self, *args, **kwargs)
    def IsOpen(self): return _wxctb.SerialPort_IsOpen(self)
    def Read(self, *args, **kwargs): return _wxctb.SerialPort_Read(self, *args, **kwargs)
    def SendBreak(self, *args, **kwargs): return _wxctb.SerialPort_SendBreak(self, *args, **kwargs)
    def SetBaudrate(self, *args, **kwargs): return _wxctb.SerialPort_SetBaudrate(self, *args, **kwargs)
    def SetLineState(self, *args, **kwargs): return _wxctb.SerialPort_SetLineState(self, *args, **kwargs)
    def SetParityBit(self, *args, **kwargs): return _wxctb.SerialPort_SetParityBit(self, *args, **kwargs)
    def Write(self, *args, **kwargs): return _wxctb.SerialPort_Write(self, *args, **kwargs)
SerialPort_swigregister = _wxctb.SerialPort_swigregister
SerialPort_swigregister(SerialPort)


def GetKey():
  return _wxctb.GetKey()
GetKey = _wxctb.GetKey


